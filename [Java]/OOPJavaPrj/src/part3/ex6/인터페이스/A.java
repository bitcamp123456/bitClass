package part3.ex6.인터페이스;

public class A {

	// A가 쓸 수 있는 객체가 없다라고 생각해보자.
	// 앞으로 태어나겠지만 없는 상태야.
	// 앞으로 태어날 것을 참조할 수 있는 자료형이 필요하다. -> 인터페이스

	// 인터페이스를 가지고 오로지 할 수 있는 것은 참조라는 것을 가능하게 한다.
	// 인터페이스가 정의하고 있는, 약속하고 있는 기능을 구현한 객체라면 무조건 참조가 가능하게 해주는거다.

	// 인터페이스를 마치 일반클래스를 사용하듯이 변수선언을 할 수 있다.
	private X x;

	// 나중에 setter가 배터리를 꽂게되는 역할을 하게 될거야.
	// X라는 인터페이스를 new하는 것은 없다.
	// 다만 X를 구현하고 있는 객체를 세팅할 수 있게하는 함수를 준비해놨다.
	public void setX(X x) {
		this.x = x;
	}

	//// private B b;

	// A와 B가 일체형으로 만들어지니까 결합력이 강하다.
	public A() {
		// 인터페이스는 구현한 것이 아니고, 실제로 사용할 수있는 도구가 아니기 때문에
		// x = new X(); 이렇게 생성하는게 말이 안되는거야.
		// 생성한다는거는 데이터 객체를 생성하는건데, 인터페이스는 데이터를 정의하고 있는게 아니잖아.

		//// b = new B();
	}

	public void print() {
		int total = x.total();

		System.out.printf("total is %d\n", total);

	}

}
